// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Match extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("season", Value.fromBigInt(BigInt.zero()));
    this.set("teamAId", Value.fromBigInt(BigInt.zero()));
    this.set("teamBId", Value.fromBigInt(BigInt.zero()));
    this.set("startingTime", Value.fromBigInt(BigInt.zero()));
    this.set("poolsStartTime", Value.fromBigInt(BigInt.zero()));
    this.set("poolsEndTime", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Match entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Match entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Match", id.toString(), this);
    }
  }

  static load(id: string): Match | null {
    return changetype<Match | null>(store.get("Match", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get season(): BigInt {
    let value = this.get("season");
    return value!.toBigInt();
  }

  set season(value: BigInt) {
    this.set("season", Value.fromBigInt(value));
  }

  get teamAId(): BigInt {
    let value = this.get("teamAId");
    return value!.toBigInt();
  }

  set teamAId(value: BigInt) {
    this.set("teamAId", Value.fromBigInt(value));
  }

  get teamBId(): BigInt {
    let value = this.get("teamBId");
    return value!.toBigInt();
  }

  set teamBId(value: BigInt) {
    this.set("teamBId", Value.fromBigInt(value));
  }

  get startingTime(): BigInt {
    let value = this.get("startingTime");
    return value!.toBigInt();
  }

  set startingTime(value: BigInt) {
    this.set("startingTime", Value.fromBigInt(value));
  }

  get poolsStartTime(): BigInt {
    let value = this.get("poolsStartTime");
    return value!.toBigInt();
  }

  set poolsStartTime(value: BigInt) {
    this.set("poolsStartTime", Value.fromBigInt(value));
  }

  get poolsEndTime(): BigInt {
    let value = this.get("poolsEndTime");
    return value!.toBigInt();
  }

  set poolsEndTime(value: BigInt) {
    this.set("poolsEndTime", Value.fromBigInt(value));
  }
}

export class Team extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Team entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Team entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Team", id.toString(), this);
    }
  }

  static load(id: string): Team | null {
    return changetype<Team | null>(store.get("Team", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }
}
