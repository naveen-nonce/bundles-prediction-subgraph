// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminAccessSet extends ethereum.Event {
  get params(): AdminAccessSet__Params {
    return new AdminAccessSet__Params(this);
  }
}

export class AdminAccessSet__Params {
  _event: AdminAccessSet;

  constructor(event: AdminAccessSet) {
    this._event = event;
  }

  get _admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _enabled(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class BetPlaced extends ethereum.Event {
  get params(): BetPlaced__Params {
    return new BetPlaced__Params(this);
  }
}

export class BetPlaced__Params {
  _event: BetPlaced;

  constructor(event: BetPlaced) {
    this._event = event;
  }

  get betId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get team(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MatchAdded extends ethereum.Event {
  get params(): MatchAdded__Params {
    return new MatchAdded__Params(this);
  }
}

export class MatchAdded__Params {
  _event: MatchAdded;

  constructor(event: MatchAdded) {
    this._event = event;
  }

  get _season(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get matchId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _teamAId(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get _teamBId(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get _startingTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _poolsStartTime(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get _poolsEndTime(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TeamAdded extends ethereum.Event {
  get params(): TeamAdded__Params {
    return new TeamAdded__Params(this);
  }
}

export class TeamAdded__Params {
  _event: TeamAdded;

  constructor(event: TeamAdded) {
    this._event = event;
  }

  get teamId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get team(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class TeamUpdated extends ethereum.Event {
  get params(): TeamUpdated__Params {
    return new TeamUpdated__Params(this);
  }
}

export class TeamUpdated__Params {
  _event: TeamUpdated;

  constructor(event: TeamUpdated) {
    this._event = event;
  }

  get teamId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get team(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Prediction__betsResult {
  value0: Address;
  value1: i32;
  value2: BigInt;
  value3: i32;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: i32,
    value2: BigInt,
    value3: i32,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Prediction__matchesResult {
  value0: boolean;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: boolean,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class Prediction extends ethereum.SmartContract {
  static bind(address: Address): Prediction {
    return new Prediction("Prediction", address);
  }

  _betIds(): BigInt {
    let result = super.call("_betIds", "_betIds():(uint256)", []);

    return result[0].toBigInt();
  }

  try__betIds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_betIds", "_betIds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bets(param0: BigInt): Prediction__betsResult {
    let result = super.call(
      "bets",
      "bets(uint256):(address,uint8,uint256,uint8,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Prediction__betsResult(
      result[0].toAddress(),
      result[1].toI32(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toBigInt()
    );
  }

  try_bets(param0: BigInt): ethereum.CallResult<Prediction__betsResult> {
    let result = super.tryCall(
      "bets",
      "bets(uint256):(address,uint8,uint256,uint8,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Prediction__betsResult(
        value[0].toAddress(),
        value[1].toI32(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toBigInt()
      )
    );
  }

  bund(): Address {
    let result = super.call("bund", "bund():(address)", []);

    return result[0].toAddress();
  }

  try_bund(): ethereum.CallResult<Address> {
    let result = super.tryCall("bund", "bund():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isAdmin(admin: Address): boolean {
    let result = super.call("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(admin)
    ]);

    return result[0].toBoolean();
  }

  try_isAdmin(admin: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(admin)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  matches(param0: BigInt): Prediction__matchesResult {
    let result = super.call(
      "matches",
      "matches(uint256):(bool,uint8,uint8,uint8,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Prediction__matchesResult(
      result[0].toBoolean(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_matches(param0: BigInt): ethereum.CallResult<Prediction__matchesResult> {
    let result = super.tryCall(
      "matches",
      "matches(uint256):(bool,uint8,uint8,uint8,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Prediction__matchesResult(
        value[0].toBoolean(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  teams(param0: i32): string {
    let result = super.call("teams", "teams(uint8):(string)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);

    return result[0].toString();
  }

  try_teams(param0: i32): ethereum.CallResult<string> {
    let result = super.tryCall("teams", "teams(uint8):(string)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _bund(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddMatchCall extends ethereum.Call {
  get inputs(): AddMatchCall__Inputs {
    return new AddMatchCall__Inputs(this);
  }

  get outputs(): AddMatchCall__Outputs {
    return new AddMatchCall__Outputs(this);
  }
}

export class AddMatchCall__Inputs {
  _call: AddMatchCall;

  constructor(call: AddMatchCall) {
    this._call = call;
  }

  get matchId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get matchData(): AddMatchCallMatchDataStruct {
    return changetype<AddMatchCallMatchDataStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class AddMatchCall__Outputs {
  _call: AddMatchCall;

  constructor(call: AddMatchCall) {
    this._call = call;
  }
}

export class AddMatchCallMatchDataStruct extends ethereum.Tuple {
  get isBettingOn(): boolean {
    return this[0].toBoolean();
  }

  get season(): i32 {
    return this[1].toI32();
  }

  get teamAId(): i32 {
    return this[2].toI32();
  }

  get teamBId(): i32 {
    return this[3].toI32();
  }

  get startingTime(): BigInt {
    return this[4].toBigInt();
  }

  get poolsStartTime(): BigInt {
    return this[5].toBigInt();
  }

  get poolsEndTime(): BigInt {
    return this[6].toBigInt();
  }
}

export class AddMatchesCall extends ethereum.Call {
  get inputs(): AddMatchesCall__Inputs {
    return new AddMatchesCall__Inputs(this);
  }

  get outputs(): AddMatchesCall__Outputs {
    return new AddMatchesCall__Outputs(this);
  }
}

export class AddMatchesCall__Inputs {
  _call: AddMatchesCall;

  constructor(call: AddMatchesCall) {
    this._call = call;
  }

  get matchIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get matchData(): Array<AddMatchesCallMatchDataStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      AddMatchesCallMatchDataStruct
    >();
  }
}

export class AddMatchesCall__Outputs {
  _call: AddMatchesCall;

  constructor(call: AddMatchesCall) {
    this._call = call;
  }
}

export class AddMatchesCallMatchDataStruct extends ethereum.Tuple {
  get isBettingOn(): boolean {
    return this[0].toBoolean();
  }

  get season(): i32 {
    return this[1].toI32();
  }

  get teamAId(): i32 {
    return this[2].toI32();
  }

  get teamBId(): i32 {
    return this[3].toI32();
  }

  get startingTime(): BigInt {
    return this[4].toBigInt();
  }

  get poolsStartTime(): BigInt {
    return this[5].toBigInt();
  }

  get poolsEndTime(): BigInt {
    return this[6].toBigInt();
  }
}

export class AddTeamsCall extends ethereum.Call {
  get inputs(): AddTeamsCall__Inputs {
    return new AddTeamsCall__Inputs(this);
  }

  get outputs(): AddTeamsCall__Outputs {
    return new AddTeamsCall__Outputs(this);
  }
}

export class AddTeamsCall__Inputs {
  _call: AddTeamsCall;

  constructor(call: AddTeamsCall) {
    this._call = call;
  }

  get teamId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get team(): AddTeamsCallTeamStruct {
    return changetype<AddTeamsCallTeamStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class AddTeamsCall__Outputs {
  _call: AddTeamsCall;

  constructor(call: AddTeamsCall) {
    this._call = call;
  }
}

export class AddTeamsCallTeamStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }
}

export class PlaceBetCall extends ethereum.Call {
  get inputs(): PlaceBetCall__Inputs {
    return new PlaceBetCall__Inputs(this);
  }

  get outputs(): PlaceBetCall__Outputs {
    return new PlaceBetCall__Outputs(this);
  }
}

export class PlaceBetCall__Inputs {
  _call: PlaceBetCall;

  constructor(call: PlaceBetCall) {
    this._call = call;
  }

  get matchId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get team(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get pool(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class PlaceBetCall__Outputs {
  _call: PlaceBetCall;

  constructor(call: PlaceBetCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAdminCall extends ethereum.Call {
  get inputs(): SetAdminCall__Inputs {
    return new SetAdminCall__Inputs(this);
  }

  get outputs(): SetAdminCall__Outputs {
    return new SetAdminCall__Outputs(this);
  }
}

export class SetAdminCall__Inputs {
  _call: SetAdminCall;

  constructor(call: SetAdminCall) {
    this._call = call;
  }

  get admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get enabled(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetAdminCall__Outputs {
  _call: SetAdminCall;

  constructor(call: SetAdminCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateTeamsCall extends ethereum.Call {
  get inputs(): UpdateTeamsCall__Inputs {
    return new UpdateTeamsCall__Inputs(this);
  }

  get outputs(): UpdateTeamsCall__Outputs {
    return new UpdateTeamsCall__Outputs(this);
  }
}

export class UpdateTeamsCall__Inputs {
  _call: UpdateTeamsCall;

  constructor(call: UpdateTeamsCall) {
    this._call = call;
  }

  get teamId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get team(): UpdateTeamsCallTeamStruct {
    return changetype<UpdateTeamsCallTeamStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class UpdateTeamsCall__Outputs {
  _call: UpdateTeamsCall;

  constructor(call: UpdateTeamsCall) {
    this._call = call;
  }
}

export class UpdateTeamsCallTeamStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }
}
